<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sjtunix</title>
  <subtitle>hack sjtu</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.sjtunix.cn/"/>
  <updated>2017-03-04T13:39:51.404Z</updated>
  <id>http://blog.sjtunix.cn/</id>
  
  <author>
    <name>River He</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>block，inline和inline-block概念和区别</title>
    <link href="http://blog.sjtunix.cn/2017/03/04/inline-block/"/>
    <id>http://blog.sjtunix.cn/2017/03/04/inline-block/</id>
    <published>2017-03-04T13:19:26.000Z</published>
    <updated>2017-03-04T13:39:51.404Z</updated>
    
    <content type="html"><![CDATA[<p>参考自<a href="http://www.cnblogs.com/KeithWang/p/3139517.html" target="_blank" rel="external">http://www.cnblogs.com/KeithWang/p/3139517.html</a></p>
<p><a href="http://www.zhangxinxu.com/wordpress/2010/11/%E6%8B%9C%E6%8B%9C%E4%BA%86%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80-%E5%9F%BA%E4%BA%8Edisplayinline-block%E7%9A%84%E5%88%97%E8%A1%A8%E5%B8%83%E5%B1%80/" target="_blank" rel="external">http://www.zhangxinxu.com/wordpress/2010/11/%E6%8B%9C%E6%8B%9C%E4%BA%86%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80-%E5%9F%BA%E4%BA%8Edisplayinline-block%E7%9A%84%E5%88%97%E8%A1%A8%E5%B8%83%E5%B1%80/</a></p>
<h2 id="总体概念"><a href="#总体概念" class="headerlink" title="总体概念"></a>总体概念</h2><ol>
<li>block和inline这两个概念是简略的说法，完整确切的说应该是 block-level elements (块级元素) 和 inline elements (内联元素)。block元素通常被现实为独立的一块，会单独换一行；inline元素则前后不会产生换行，一系列inline元素都在一行内显示，直到该行排满。</li>
<li>大体来说HTML元素各有其自身的布局级别（block元素还是inline元素）：<br>常见的块级元素有 DIV, FORM, TABLE, P, PRE, H1~H6, DL, OL, UL 等。<br>常见的内联元素有 SPAN, A, STRONG, EM, LABEL, INPUT, SELECT, TEXTAREA, IMG, BR 等。</li>
<li>block元素可以包含block元素和inline元素；但inline元素只能包含inline元素。要注意的是这个是个大概的说法，每个特定的元素能包含的元素也是特定的，所以具体到个别元素上，这条规律是不适用的。比如 P 元素，只能包含inline元素，而不能包含block元素。</li>
<li>一般来说，可以通过display:inline和display:block的设置，改变元素的布局级别。</li>
</ol>
<a id="more"></a>
<h2 id="block，inline和inline-block细节对比"><a href="#block，inline和inline-block细节对比" class="headerlink" title="block，inline和inline-block细节对比"></a>block，inline和inline-block细节对比</h2><ul>
<li>display:block<ol>
<li>block元素会独占一行，多个block元素会各自新起一行。默认情况下，block元素宽度自动填满其父元素宽度。</li>
<li>block元素可以设置width,height属性。块级元素即使设置了宽度,仍然是独占一行。</li>
<li>block元素可以设置margin和padding属性。</li>
</ol>
</li>
<li>display:inline<ol>
<li>inline元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其宽度随元素的内容而变化。</li>
<li>inline元素设置width,height属性无效。</li>
<li>inline元素的margin和padding属性，水平方向的padding-left, padding-right, margin-left, margin-right都产生边距效果；但竖直方向的padding-top, padding-bottom, margin-top, margin-bottom不会产生边距效果。</li>
</ol>
</li>
<li><p>display:inline-block</p>
<ol>
<li>简单来说就是将对象呈现为inline对象，但是对象的内容作为block对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个link（a元素）inline-block属性值，使其既具有block的宽度高度特性又具有inline的同行特性。</li>
</ol>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2></li>
<li><p>一般我们会用display:block，display:inline或者display:inline-block来调整元素的布局级别，其实display的参数远远不止这三种，仅仅是比较常用而已。</p>
</li>
<li>IE（低版本IE）本来是不支持inline-block的，所以在IE中对内联元素使用display:inline-block，理论上IE是不识别的，但使用display:inline-block在IE下会触发layout，从而使内联元素拥有了display:inline-block属性的表象。</li>
</ul>
<h2 id="消除inline-block之间的空格"><a href="#消除inline-block之间的空格" class="headerlink" title="消除inline-block之间的空格"></a>消除inline-block之间的空格</h2><p>在完整的展示兼容性的像素级的inline-block元素列表布局前，有必要讲讲使用display:inline-block列表布局经常会遇到的“换行符/空格间隙问题”。</p>
<p>如果inline-block元素间有空格或是换行产生了间隙，那是正常的，应该的。如果没有空格与间隙才是不正常的（IE6/7 block水平元素）。真正的inline-block元素，就像个图片一样。例如，两个不在一行的img标签，形成的两个图片之间就会有间隙。</p>
<p>要让这些空格不出现，最简单的最容易理解的就是让列表的结束标签与下一个列表的开始标签连在一起，就像是：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<p>但是，这种做法好傻啊，而且HTML代码的可读性很不好。尤其考虑到现实情况：后台人员可能不清楚标签换行对样式的影响，直接后台repeat的时候，换行了。所以，此方法顶多临时应付些小打小闹的地方，要想广泛使用，显然业余了。</p>
<p>其实，我们只要细细想想，空格符本质上就是个字符，与a,b,c,d这些字符是个同一个属性的东西，只是他是空格，透明的看不见而已（但可以选中）。所以，只要我们使用让文字宽度为0的那些方法，不就可以解决inline-block元素间换行符间隙的问题啦！</p>
<p>于是，很自然而然的，想到了以下样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attribute">font-size</span>: <span class="number">0</span>;&#125;</div></pre></td></tr></table></figure>
<p>但是chrome浏览器不支持，考虑另一种方式，使用<code>letter-spacing</code>属性。可以控制文字间的水平距离，支持负值，可以让文字水平方向上重叠（line<br>-height是让文字垂直方向上重叠）。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attribute">letter-spaceing</span>:-<span class="number">4px</span>;&#125; <span class="comment">/* 依据不同字体，有不同的间距值选择</span></div></pre></td></tr></table></figure>
<p>总结就是：</p>
<ul>
<li>block水平的元素inline-block化后，IE6/7没有换行符间隙问题，其他浏览器均有；</li>
<li>inline水平的元素inline-block后，所有主流浏览器都有换行符/空格间隙问题；</li>
<li>font-size:0，去除换行符间隙，在IE6/7下残留1像素间隙，Chrome浏览器无效，其他浏览器都完美去除；</li>
<li>letter-spacing负值可以去除所有浏览器的换行符间隙，但是，Opera浏览器下极限是间隙1像素，0像素会反弹，换行符间隙还原。</li>
</ul>
<p>考录两种办法结合，兼容竟可能多的浏览器，</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attribute">letter-spacing</span>:-<span class="number">3px</span>; <span class="attribute">font-size</span>:<span class="number">0</span>;&#125; <span class="comment">/* 针对Arial字体 */</span></div></pre></td></tr></table></figure>
<p>所以，应用display:inline-block属性实现列表布局的几个关键字就是：<em>block水平的标签，font-size:0和letter-spacing负值</em>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考自&lt;a href=&quot;http://www.cnblogs.com/KeithWang/p/3139517.html&quot;&gt;http://www.cnblogs.com/KeithWang/p/3139517.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2010/11/%E6%8B%9C%E6%8B%9C%E4%BA%86%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80-%E5%9F%BA%E4%BA%8Edisplayinline-block%E7%9A%84%E5%88%97%E8%A1%A8%E5%B8%83%E5%B1%80/&quot;&gt;http://www.zhangxinxu.com/wordpress/2010/11/%E6%8B%9C%E6%8B%9C%E4%BA%86%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80-%E5%9F%BA%E4%BA%8Edisplayinline-block%E7%9A%84%E5%88%97%E8%A1%A8%E5%B8%83%E5%B1%80/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;总体概念&quot;&gt;&lt;a href=&quot;#总体概念&quot; class=&quot;headerlink&quot; title=&quot;总体概念&quot;&gt;&lt;/a&gt;总体概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;block和inline这两个概念是简略的说法，完整确切的说应该是 block-level elements (块级元素) 和 inline elements (内联元素)。block元素通常被现实为独立的一块，会单独换一行；inline元素则前后不会产生换行，一系列inline元素都在一行内显示，直到该行排满。&lt;/li&gt;
&lt;li&gt;大体来说HTML元素各有其自身的布局级别（block元素还是inline元素）：&lt;br&gt;常见的块级元素有 DIV, FORM, TABLE, P, PRE, H1~H6, DL, OL, UL 等。&lt;br&gt;常见的内联元素有 SPAN, A, STRONG, EM, LABEL, INPUT, SELECT, TEXTAREA, IMG, BR 等。&lt;/li&gt;
&lt;li&gt;block元素可以包含block元素和inline元素；但inline元素只能包含inline元素。要注意的是这个是个大概的说法，每个特定的元素能包含的元素也是特定的，所以具体到个别元素上，这条规律是不适用的。比如 P 元素，只能包含inline元素，而不能包含block元素。&lt;/li&gt;
&lt;li&gt;一般来说，可以通过display:inline和display:block的设置，改变元素的布局级别。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.sjtunix.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://blog.sjtunix.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS异步调用和event-loop</title>
    <link href="http://blog.sjtunix.cn/2017/03/02/JS%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/"/>
    <id>http://blog.sjtunix.cn/2017/03/02/JS异步调用/</id>
    <published>2017-03-02T10:22:39.000Z</published>
    <updated>2017-03-02T10:30:39.700Z</updated>
    
    <content type="html"><![CDATA[<p>文章转自<a href="https://github.com/wangfupeng1988/js-async-tutorial/blob/master/part1-basic/02-event-loop.md" target="_blank" rel="external">github</a></p>
<h1 id="异步和-event-loop"><a href="#异步和-event-loop" class="headerlink" title="异步和 event-loop"></a>异步和 event-loop</h1><p>提到异步，就必须提 event-loop 。event-loop 中文翻译叫做“时间轮询”，它是能体现出单线程中异步操作是如何被执行的。</p>
<p>首先，<strong>强烈大家观看一个歪果仁的视频《<a href="http://www.tudou.com/programs/view/ACDNKZJm6pQ/" target="_blank" rel="external">what the hack is event loop</a>》</strong>，只有不到半个小时的时间，但是将的非常详细。<em>如果那个链接失效，访问<a href="http://pan.baidu.com/s/1c1E0rjM" target="_blank" rel="external">这里</a>（密码: xx9f）</em></p>
<a id="more"></a>
<p>其次，再结合阮一峰老师的《<a href="http://www.ruanyifeng.com/blog/2013/10/event_loop.html" target="_blank" rel="external">什么是event loop</a>》一起看一下。将这两个看完就基本了解 event loop 了</p>
<p>最后，event-loop 是一块内容比较独立的技术性知识，它是什么样子就是什么样子，讲解起来可变通性非常小。因此，本节说一下我对 event-loop 的理解和体会</p>
<h2 id="本节内容概述"><a href="#本节内容概述" class="headerlink" title="本节内容概述"></a>本节内容概述</h2><ul>
<li>举例说明</li>
<li>核心概念</li>
<li>思考两个问题</li>
</ul>
<h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>给出一段简单的 js 代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'line 1'</span>)</div><div class="line">setTimeout(<span class="built_in">console</span>.log, <span class="number">1000</span>, <span class="string">'line 2'</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'line 3'</span>)</div></pre></td></tr></table></figure>
<p>以上一共三行代码，该程序被执行的时候，会依次挨行执行，这被称作 <strong>main-stack</strong> 。</p>
<ul>
<li>第一步，执行第一行，将结果<code>line 1</code>打印出来</li>
<li>第二步，执行第二行，注意此时会将这个操作暂时存储在一个叫做 <strong>call-stack</strong> 的内存地址中，因为<code>setTimeout</code>是一个异步执行操作。</li>
<li>第三步，执行第三行，将结果<code>line 3</code>打印出出来</li>
<li>第四步，等待 <strong>main-stack</strong> 的程序（一共三行）都全部执行完了，然后立马实时查看 <strong>call-stack</strong> 中是否还有未执行的异步回调，如果有（1000ms 之后）则把它拿到主线程中来执行</li>
<li>第五步，主线程又被执行完了，再实时查看 <strong>call-stack</strong> 中是否还有未执行的异步回调。</li>
</ul>
<p>以上只拿了<code>setTimeout</code>举例子，但是对于网络请求、IO操作、事件绑定道理都是一样的。<strong>如果我讲的简单例子你还是看不懂，一定要去看文章最初提到的《what the hack is event loop》视频，重要重要！！！</strong></p>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>理解 event-loop 的核心概念是要明白以下几点：</p>
<ul>
<li><strong>main-stack</strong> 和 <strong>call-stack</strong> 的区别</li>
<li>执行 <strong>main-stack</strong> 时将异步操作暂存到 <strong>call-stack</strong></li>
<li><strong>main-stack</strong> 执行完成之后，实时检查 <strong>call-stack</strong> 的任务是否应该被拿到 <strong>main-stack</strong> 中来执行</li>
</ul>
<h2 id="思考三个问题"><a href="#思考三个问题" class="headerlink" title="思考三个问题"></a>思考三个问题</h2><p><strong>第一题，以下代码的输出顺序是什么</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="string">'a'</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'b'</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span>)</div></pre></td></tr></table></figure>
<p>答案是<code>b c a</code>，有疑问的需要再去看上面的介绍或者那个视频。</p>
<p><strong>第二题，以下代码中，最后输出的结果是否是 500</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i, t = <span class="built_in">Date</span>.now()</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now() - t)  <span class="comment">// 输出多少？？？</span></div><div class="line">&#125;</div><div class="line">setTimeout(fn, <span class="number">500</span>)</div></pre></td></tr></table></figure>
<p>答案是大于 500ms ，因为 for 函数需要花费一些时间，等 for 执行完之后再开始计算 500ms 之后执行 fn</p>
<p><strong>第三题，事件绑定是不是异步操作？</strong></p>
<p>这个问题大家根据 event-loop 的讲解和视频来思考，我们下一节再给出解答。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章转自&lt;a href=&quot;https://github.com/wangfupeng1988/js-async-tutorial/blob/master/part1-basic/02-event-loop.md&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;异步和-event-loop&quot;&gt;&lt;a href=&quot;#异步和-event-loop&quot; class=&quot;headerlink&quot; title=&quot;异步和 event-loop&quot;&gt;&lt;/a&gt;异步和 event-loop&lt;/h1&gt;&lt;p&gt;提到异步，就必须提 event-loop 。event-loop 中文翻译叫做“时间轮询”，它是能体现出单线程中异步操作是如何被执行的。&lt;/p&gt;
&lt;p&gt;首先，&lt;strong&gt;强烈大家观看一个歪果仁的视频《&lt;a href=&quot;http://www.tudou.com/programs/view/ACDNKZJm6pQ/&quot;&gt;what the hack is event loop&lt;/a&gt;》&lt;/strong&gt;，只有不到半个小时的时间，但是将的非常详细。&lt;em&gt;如果那个链接失效，访问&lt;a href=&quot;http://pan.baidu.com/s/1c1E0rjM&quot;&gt;这里&lt;/a&gt;（密码: xx9f）&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.sjtunix.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>阿里在线编程题</title>
    <link href="http://blog.sjtunix.cn/2017/03/02/%E9%98%BF%E9%87%8C%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    <id>http://blog.sjtunix.cn/2017/03/02/阿里在线编程题/</id>
    <published>2017-03-02T09:51:49.000Z</published>
    <updated>2017-03-04T13:40:04.893Z</updated>
    
    <content type="html"><![CDATA[<p>记录阿里的在线面试题。</p>
<h1 id="数组切片题"><a href="#数组切片题" class="headerlink" title="数组切片题"></a>数组切片题</h1><h2 id="题设"><a href="#题设" class="headerlink" title="题设"></a>题设</h2><p>对于一个长度为N的整型数组A，数组里所有的数都是正整数，对于两个满足<code>0&lt;=X&lt;=Y&lt;N</code>的整数，<code>A[X], A[X+1]...A[Y]</code>构成A的一个切片，记作<code>(X, Y)</code>。<br>用三个下标<code>m1, m2, m3</code>下标满足条件<code>0&lt;m1, m2+1&lt;m2, m2+1&lt;m3&lt;N-1</code>。<br>可以把这个整型数组分成<code>(0, m1-1), (m1+1, m2-1), (m2+1, m3-1), (m3+1, N-1)</code>四个切片。如果这四个切片中的整数求和相等，称作“四等分”。<br>编写一个函数，求一个给定的整型数组是否可以四等分看，如果可以，返回一个布尔类型的<code>true</code>，如果不可以返回一个布尔类型的<code>false</code>。</p>
<p>限制条件：数组A最多有1,000,000项，数组中的整数取值范围介于-1,000,000到1,000,000之间。<br>要求：函数的计算复杂度为<code>O(N)</code>，使用额外存储空间（除了输入的数组之外）最多为<code>O(N)</code>。<br>例子：<br>对于数组A=[1, 5, 1, 1, 1, 1, 4, 1, 7, 3, 7]存在下标2, 7, 9使得数组分成四个分片[2, 5], [1, 1, 1, 4], [7], [7]，这三个分片内整数之和相等，所以对于这个数组，函数应该返回<code>true</code>。<br>对于数组A=[10, 2, 11, 13, 1, 1, 1, 1, 1]，找不到能把数组四等分的下标，所以函数应该返回<code>false</code>。<br><a id="more"></a></p>
<h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>很遗憾，当时把题目看错了，因为室友前一天做了，所以以为下表元素是算在求和之内的。直到最后五分钟才意识到，已经晚了。</p>
<p>第一种思路当然是暴力求解，三个<code>for</code>循环，但是这显然是不行的。因为复杂度为<code>O(N^3)</code>。</p>
<p>我这里采用的方法，受到了很多排序算法的启发，步骤如下：</p>
<ol>
<li>使用三个游标，先初始化游标， 初始位置为1，3，5，计算四个子块的和。</li>
<li>然后进入<code>while</code>循环，判断子块和是否相等，如果相等返回<code>true</code>结束。</li>
<li>找出最小和的游标，然后将游标右移一位。</li>
<li>注意，游标移动的时候，可能会影响到后面的游标，因此要做出判断是否移动后续游标，更新其它游标位置和各子块的和。</li>
<li>重复2,3,4步骤，直到第四块和成为了最小块或三号游标到达了倒数第二个位置（底部），返回<code>false</code>结束。</li>
</ol>
<p>我把这个方法叫做“暴力逻辑求解”，暂时没想到其他方法……</p>
<p>程序如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.sjtunix.job;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sum3</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/** 请完成下面这个函数，实现题目要求的功能 **/</span></div><div class="line"> <span class="comment">/** 当然，你也可以不按照这个模板来作答，完全按照自己的想法来 ^-^  **/</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">boolean</span> positive)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> N = a.length;</div><div class="line">		<span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">			<span class="keyword">if</span>(positive)</div><div class="line">				p = a[p] &lt; a[i] ? p : i;</div><div class="line">			<span class="keyword">else</span> </div><div class="line">				p = a[p] &gt; a[i] ? p : i;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> p;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> N = A.length;</div><div class="line">        <span class="keyword">if</span>(N &lt; <span class="number">7</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="comment">// 准备三个游标</span></div><div class="line">        <span class="keyword">int</span> p1 = <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> p2 = <span class="number">3</span>;</div><div class="line">		<span class="keyword">int</span> p3 = <span class="number">5</span>;</div><div class="line">		<span class="comment">// 存储区段和并初始化</span></div><div class="line">		<span class="keyword">int</span>[] sum = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</div><div class="line">		sum[<span class="number">0</span>] = A[<span class="number">0</span>];</div><div class="line">        sum[<span class="number">1</span>] = A[<span class="number">2</span>];</div><div class="line">        sum[<span class="number">2</span>] = A[<span class="number">4</span>];</div><div class="line">        sum[<span class="number">3</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">6</span>; i&lt;N; i++)</div><div class="line">        	sum[<span class="number">3</span>] += A[i];</div><div class="line">        <span class="keyword">int</span> ASum = A[<span class="number">0</span>] + A[<span class="number">1</span>] + A[<span class="number">2</span>] + A[<span class="number">3</span>] + A[<span class="number">4</span>] + A[<span class="number">5</span>] + sum[<span class="number">3</span>];</div><div class="line">        <span class="keyword">boolean</span> positive = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(ASum &lt; <span class="number">0</span>)</div><div class="line">        	positive = <span class="keyword">false</span>;</div><div class="line">		<span class="comment">// 核心算法</span></div><div class="line">		<span class="keyword">while</span>(p3&lt;N-<span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">if</span>(sum[<span class="number">0</span>]==sum[<span class="number">1</span>] &amp;&amp; sum[<span class="number">1</span>]==sum[<span class="number">2</span>] &amp;&amp; sum[<span class="number">2</span>]==sum[<span class="number">3</span>]) </div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			<span class="keyword">switch</span>(min(sum, positive)) &#123;</div><div class="line">				<span class="keyword">case</span> <span class="number">0</span> :</div><div class="line">					sum[<span class="number">0</span>] += A[p1];</div><div class="line">					sum[<span class="number">1</span>] -= A[p1+<span class="number">1</span>];</div><div class="line">					p1++;</div><div class="line">					<span class="keyword">if</span>(p1+<span class="number">1</span>==p2) &#123;</div><div class="line">						sum[<span class="number">1</span>] += A[p2];</div><div class="line">						sum[<span class="number">2</span>] -= A[p2+<span class="number">1</span>];</div><div class="line">						p2++;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span>(p2+<span class="number">1</span>==p3) &#123;</div><div class="line">						sum[<span class="number">2</span>] += A[p3];</div><div class="line">						sum[<span class="number">3</span>] -= A[p3+<span class="number">1</span>];</div><div class="line">						p3++;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> <span class="number">1</span> :</div><div class="line">					sum[<span class="number">1</span>] += A[p2];</div><div class="line">					sum[<span class="number">2</span>] -= A[p2+<span class="number">1</span>];</div><div class="line">					p2++;</div><div class="line">					<span class="keyword">if</span>(p2+<span class="number">1</span>==p3) &#123;</div><div class="line">						sum[<span class="number">2</span>] += A[p3];</div><div class="line">						sum[<span class="number">3</span>] -= A[p3+<span class="number">1</span>];</div><div class="line">						p3++;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> <span class="number">2</span> :</div><div class="line">					sum[<span class="number">2</span>] += A[p3];</div><div class="line">					sum[<span class="number">3</span>] -= A[p3+<span class="number">1</span>];</div><div class="line">					p3++;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> <span class="number">3</span> :</div><div class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        ArrayList&lt;Integer&gt; inputs = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        String line = in.nextLine();</div><div class="line">        <span class="keyword">while</span>(line != <span class="keyword">null</span> &amp;&amp; !line.isEmpty()) &#123;</div><div class="line">            <span class="keyword">int</span> value = Integer.parseInt(line.trim());</div><div class="line">            <span class="keyword">if</span>(value == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">            inputs.add(value);</div><div class="line">            line = in.nextLine();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span>[] A = <span class="keyword">new</span> <span class="keyword">int</span>[inputs.size()];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;inputs.size(); i++) &#123;</div><div class="line">            A[i] = inputs.get(i).intValue();</div><div class="line">        &#125;</div><div class="line">        Boolean res = resolve(A);</div><div class="line"></div><div class="line">        System.out.println(String.valueOf(res));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序复杂度满足<code>O(N)</code>要求。</p>
<hr>
<p>更新。。。又看错了题目。。。数组可以有负数，改了一下代码，不知道行不行得通。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录阿里的在线面试题。&lt;/p&gt;
&lt;h1 id=&quot;数组切片题&quot;&gt;&lt;a href=&quot;#数组切片题&quot; class=&quot;headerlink&quot; title=&quot;数组切片题&quot;&gt;&lt;/a&gt;数组切片题&lt;/h1&gt;&lt;h2 id=&quot;题设&quot;&gt;&lt;a href=&quot;#题设&quot; class=&quot;headerlink&quot; title=&quot;题设&quot;&gt;&lt;/a&gt;题设&lt;/h2&gt;&lt;p&gt;对于一个长度为N的整型数组A，数组里所有的数都是正整数，对于两个满足&lt;code&gt;0&amp;lt;=X&amp;lt;=Y&amp;lt;N&lt;/code&gt;的整数，&lt;code&gt;A[X], A[X+1]...A[Y]&lt;/code&gt;构成A的一个切片，记作&lt;code&gt;(X, Y)&lt;/code&gt;。&lt;br&gt;用三个下标&lt;code&gt;m1, m2, m3&lt;/code&gt;下标满足条件&lt;code&gt;0&amp;lt;m1, m2+1&amp;lt;m2, m2+1&amp;lt;m3&amp;lt;N-1&lt;/code&gt;。&lt;br&gt;可以把这个整型数组分成&lt;code&gt;(0, m1-1), (m1+1, m2-1), (m2+1, m3-1), (m3+1, N-1)&lt;/code&gt;四个切片。如果这四个切片中的整数求和相等，称作“四等分”。&lt;br&gt;编写一个函数，求一个给定的整型数组是否可以四等分看，如果可以，返回一个布尔类型的&lt;code&gt;true&lt;/code&gt;，如果不可以返回一个布尔类型的&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;限制条件：数组A最多有1,000,000项，数组中的整数取值范围介于-1,000,000到1,000,000之间。&lt;br&gt;要求：函数的计算复杂度为&lt;code&gt;O(N)&lt;/code&gt;，使用额外存储空间（除了输入的数组之外）最多为&lt;code&gt;O(N)&lt;/code&gt;。&lt;br&gt;例子：&lt;br&gt;对于数组A=[1, 5, 1, 1, 1, 1, 4, 1, 7, 3, 7]存在下标2, 7, 9使得数组分成四个分片[2, 5], [1, 1, 1, 4], [7], [7]，这三个分片内整数之和相等，所以对于这个数组，函数应该返回&lt;code&gt;true&lt;/code&gt;。&lt;br&gt;对于数组A=[10, 2, 11, 13, 1, 1, 1, 1, 1]，找不到能把数组四等分的下标，所以函数应该返回&lt;code&gt;false&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://blog.sjtunix.cn/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="Java" scheme="http://blog.sjtunix.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>三栏式布局</title>
    <link href="http://blog.sjtunix.cn/2017/02/26/%E4%B8%89%E6%A0%8F%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <id>http://blog.sjtunix.cn/2017/02/26/三栏式布局/</id>
    <published>2017-02-25T17:17:37.000Z</published>
    <updated>2017-02-25T17:38:53.391Z</updated>
    
    <content type="html"><![CDATA[<p>position: absolute和fixed脱离了文档流，无法计算高度，作为子元素的话是无法撑开父元素的。</p>
<p>CSS很弱鸡的说，因此参加百度前端技术学院恶补下，今天三栏式布局，一不小心踩了一堆的坑。现在来总结一样，收获还是不晓得（小的…）</p>
<p>首先给的题目是这样的：</p>
<a id="more"></a>
<p><img src="/img/three_column_layout.png" alt="三栏式布局"></p>
<p>首先拿到题目，思路是，外层包一个大的<code>div</code>，然后，左右栏分别使用<code>float: left</code>和<code>float: right</code>浮动定位，中间栏我第一时间就认定是使用<code>position: absolute</code>绝对定位。事实上，这个思路是没有错的。代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>团队介绍<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"leftbox"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sefie"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/me.jpg"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">p</span>&gt;</span>**<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">p</span>&gt;</span>_________<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">p</span>&gt;</span>_________<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">p</span>&gt;</span>_________<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">p</span>&gt;</span>_________<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middlebox"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>清除浮动（clearfix hack）<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>在使用浮动的时候经常会遇到一个古怪的事情：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/img.png"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>&amp;lt;div&amp;gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>不......这个图片比包含它的元素还高，而且它是浮动的，于是它就溢出到了容器外面！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/eg.png"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>见证奇迹的时候到了！有一种比较丑陋的方法可以解决这个问题，它叫做<span class="tag">&lt;<span class="name">i</span>&gt;</span>清除浮动（clearfix hack）<span class="tag">&lt;/<span class="name">i</span>&gt;</span>。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>。</div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>让我们加入一些新的CSS样式：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/clearfix.png"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>现在再看看发生了什么：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>&amp;lt;div class="clearfix"&amp;gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>好多了！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/eg.png"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>这个可以在现代浏览器上工作。如果你想要支持IE6，你就需要再加入如下样式：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/clearfix2.png"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>有些独特的浏览器需要“额外的关照”。<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best"</span>&gt;</span>清除浮动这潭水很深很深<span class="tag">&lt;/<span class="name">a</span>&gt;</span>，但是这个简单的解决方案已经可以在今天所有主要浏览器上工作。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rightbox"</span>&gt;</span></div><div class="line">			</div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* clear browser default settings */</span></div><div class="line">* &#123;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* main css settings */</span></div><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">	<span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#container</span> &#123;</div><div class="line">	<span class="attribute">overflow</span>: auto;</div><div class="line"> 	<span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#eee</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* leftbox start */</span></div><div class="line"><span class="selector-class">.leftbox</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.sefie</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">2px</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.sefie</span> <span class="selector-tag">img</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">80px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.sefie</span> <span class="selector-class">.intro</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">1em</span>;</div><div class="line">	<span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">120px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.sefie</span> <span class="selector-class">.intro</span> <span class="selector-tag">p</span> &#123;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* leftbox end */</span></div><div class="line"></div><div class="line"><span class="comment">/* middle start */</span></div><div class="line"><span class="selector-class">.middlebox</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">left</span>: <span class="number">280px</span>;</div><div class="line">	<span class="attribute">right</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.middlebox</span> <span class="selector-tag">p</span> &#123;</div><div class="line">	<span class="attribute">text-indent</span>: <span class="number">2em</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* middle end */</span></div><div class="line"></div><div class="line"><span class="comment">/* right start */</span></div><div class="line"><span class="selector-class">.rightbox</span> &#123;</div><div class="line">	<span class="attribute">float</span>: right;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">120px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* right end */</span></div></pre></td></tr></table></figure>
<p>然而。。。</p>
<p>当我写完了<code>leftbox</code>和<code>rightbox</code>，加上了<code>middlebox</code>之后，却发现父容器无法包含<code>middlebox</code>。效果图如下：</p>
<p><img src="/img/three_column_layout1.png" alt="三栏式布局"></p>
<p>父容器无法包含绝对定位的元素，因为绝对定位是脱离文档流的！</p>
<p>所以只能使用相对定位。该代码如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.middlebox</span> &#123;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">280px</span>;</div><div class="line">	<span class="attribute">margin-right</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除此之外，html定义div的顺序也十分重要，<code>middlebox</code>的定义必须放在最后面，因为浮动定位是根据前面的元素来计算的。所以，如果把<code>middlebox</code>的定义放在前面会出现这种结果：</p>
<p><img src="/img/three_column_layout2.png" alt="三栏式布局"></p>
<p>这当然也不是要求的结果。</p>
<p>除此之外，如果后面还要再加布局，一定要注意清除浮动<code>clear: both</code>。</p>
<p>总结下知识点，主要考查知识点<code>position</code>，<code>static</code>属性属于默认的，按照文档流布局，<code>absolute</code>和<code>fixed</code>都是绝对定位，区别在于<code>fixed</code>相对于浏览器窗口，<code>absolute</code>相对于<code>static</code>之外的第一个父元素。<code>relative</code>相对于其正常位置偏移，使用<code>top</code>、<code>right</code>、<code>bottom</code>和<code>left</code>定位。<code>inherit</code>继承父级元素<code>position</code>属性。</p>
<p>需要注意的是绝对定位无法自适应计算高宽，在遇到需要这种情况时采用相对布局。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;position: absolute和fixed脱离了文档流，无法计算高度，作为子元素的话是无法撑开父元素的。&lt;/p&gt;
&lt;p&gt;CSS很弱鸡的说，因此参加百度前端技术学院恶补下，今天三栏式布局，一不小心踩了一堆的坑。现在来总结一样，收获还是不晓得（小的…）&lt;/p&gt;
&lt;p&gt;首先给的题目是这样的：&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.sjtunix.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://blog.sjtunix.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>chrom浏览器font-size应用失效</title>
    <link href="http://blog.sjtunix.cn/2017/02/25/chrom%E6%B5%8F%E8%A7%88%E5%99%A8font-size%E5%BA%94%E7%94%A8%E5%A4%B1%E6%95%88/"/>
    <id>http://blog.sjtunix.cn/2017/02/25/chrom浏览器font-size应用失效/</id>
    <published>2017-02-25T08:45:13.000Z</published>
    <updated>2017-02-25T14:00:31.174Z</updated>
    
    <content type="html"><![CDATA[<p>what the hell!<br>今天学css调试的时候，应用<code>font-size: 10px</code>一直无效，半天无头绪，百度了才知道，chrome根本不支持<code>font-size&lt;12px</code>的情况，开发者认为亚洲字符最小不应该小于12px！这是什么逻辑？</p>
<p>em和px两个单位的转换，在写css时，为了文本域相关标签设置的方便，可以在html下定义font-size，以此为基准，使用em单位来定义相关标签的padding，margin，line-height以及所有文字的font-size属性，会非常方便。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">	font-family: Arial, 'Microsoft YaHei';</div><div class="line">	&lt;!-- 以此为基准，该css应用的页面所有em单位都有1em = 15px --&gt;</div><div class="line">	font-size: 15px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;what the hell!&lt;br&gt;今天学css调试的时候，应用&lt;code&gt;font-size: 10px&lt;/code&gt;一直无效，半天无头绪，百度了才知道，chrome根本不支持&lt;code&gt;font-size&amp;lt;12px&lt;/code&gt;的情况，开发者认为亚洲字符最小不应该
    
    </summary>
    
      <category term="前端" scheme="http://blog.sjtunix.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://blog.sjtunix.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://blog.sjtunix.cn/2016/12/27/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.sjtunix.cn/2016/12/27/排序算法/</id>
    <published>2016-12-27T13:55:35.000Z</published>
    <updated>2016-12-27T13:55:35.805Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Stacks and Queues</title>
    <link href="http://blog.sjtunix.cn/2016/12/27/Stack-and-Queue/"/>
    <id>http://blog.sjtunix.cn/2016/12/27/Stack-and-Queue/</id>
    <published>2016-12-27T12:39:22.000Z</published>
    <updated>2016-12-27T13:54:44.161Z</updated>
    
    <content type="html"><![CDATA[<p>堆栈和队列都可以通过链表和数组分别来实现。</p>
<p>在堆栈和队列的实现过程中，使用到了泛型和接口的技术。</p>
<h1 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h1><p>堆栈是一种先进后出的存储结构(FILO)。</p>
<p>在用数组实现堆栈的时候需要在一定情况下调整数组大小。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Item[] s;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> N = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">()</span> </span>&#123;</div><div class="line">		s = <span class="keyword">new</span> Item[<span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (N == s.length) resize(<span class="number">2</span> * s.length);</div><div class="line">		s[N++] = item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 避免反复调整数组大小，选择1/4</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (N == <span class="number">1</span>/<span class="number">4</span> * s.length) resize(s.length/<span class="number">2</span>);</div><div class="line">		Item item = s[--N];</div><div class="line">		s[N] = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">return</span> item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> N == <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> N;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">		Item[] copy = <span class="keyword">new</span> Item[capacity];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">			copy[i] = s[i];</div><div class="line">		s = copy;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>链表的实现方式比较简单。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedStack</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Node first = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> N = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">		Item item;</div><div class="line">		Node next;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span> </span>&#123;</div><div class="line">		Node oldfirst = first;</div><div class="line">		first = <span class="keyword">new</span> Node();</div><div class="line">		first.item = item;</div><div class="line">		first.next = oldfirst;</div><div class="line">		N++;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">		Item item = first.item;</div><div class="line">		first = first.next;</div><div class="line">		<span class="keyword">return</span> item;</div><div class="line">		N--;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> first == <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> N;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列是一种先进先出的存储结构(FIFO)。</p>
<p>数组实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Item[] q;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> tail = head = N = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">		q = <span class="keyword">new</span> Item[<span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">enqueue</span><span class="params">(Item item)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (N == q.length) resize(<span class="number">2</span> * q.length);</div><div class="line">		<span class="keyword">if</span> (tail == q.length) tail = <span class="number">0</span>;</div><div class="line">		q[tail++] = item;</div><div class="line">		N++; </div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</div><div class="line">		Item item = q[head];</div><div class="line">		q[head++] = <span class="keyword">null</span>;</div><div class="line">		N--;</div><div class="line">		<span class="keyword">if</span> (head == q.length) head = <span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span> (N == s.length/<span class="number">4</span>) resize(s.lenght/<span class="number">2</span>);</div><div class="line">		<span class="keyword">return</span> item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">		Item copy = <span class="keyword">new</span> Item[capacity];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">			copy[i] = q[(i + head)%s.length];</div><div class="line">		s = copy;</div><div class="line">		head = <span class="number">0</span>;</div><div class="line">		tail = N;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> N;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> N == <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>链表实现方式比较简单。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedQueue</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> Node first, last;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> N;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">		Item item;</div><div class="line">		Node next;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Item item)</span> </span>&#123;</div><div class="line">		Node oldlast = last;</div><div class="line">		last = <span class="keyword">new</span> Node();</div><div class="line">		last.item = item;</div><div class="line">		last.next = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span> (isEmpty()) first = last;</div><div class="line">		<span class="keyword">else</span> oldlast.next = last;</div><div class="line">		N++;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</div><div class="line">		Item item = first.item;</div><div class="line">		first = first.next;</div><div class="line">		<span class="keyword">if</span> (isEmpty()) last = <span class="keyword">null</span>;</div><div class="line">		N--;</div><div class="line">		<span class="keyword">return</span> item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> N;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> N == <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="课程作业——双端队列和随机队列"><a href="#课程作业——双端队列和随机队列" class="headerlink" title="课程作业——双端队列和随机队列"></a>课程作业——双端队列和随机队列</h1><h2 id="shuffle算法-Fisher-Yates-shuffle-and-Knuth-shuffle"><a href="#shuffle算法-Fisher-Yates-shuffle-and-Knuth-shuffle" class="headerlink" title="shuffle算法(Fisher-Yates shuffle and Knuth shuffle)"></a>shuffle算法(Fisher-Yates shuffle and Knuth shuffle)</h2><h2 id="水塘抽样算法-Reservoir-sampling"><a href="#水塘抽样算法-Reservoir-sampling" class="headerlink" title="水塘抽样算法(Reservoir sampling)"></a>水塘抽样算法(Reservoir sampling)</h2><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p><strong>未完待续</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;堆栈和队列都可以通过链表和数组分别来实现。&lt;/p&gt;
&lt;p&gt;在堆栈和队列的实现过程中，使用到了泛型和接口的技术。&lt;/p&gt;
&lt;h1 id=&quot;堆栈&quot;&gt;&lt;a href=&quot;#堆栈&quot; class=&quot;headerlink&quot; title=&quot;堆栈&quot;&gt;&lt;/a&gt;堆栈&lt;/h1&gt;&lt;p&gt;堆栈是一种先进后出的存储结构(FILO)。&lt;/p&gt;
&lt;p&gt;在用数组实现堆栈的时候需要在一定情况下调整数组大小。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sjtunix.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="http://blog.sjtunix.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>After Effects DEV</title>
    <link href="http://blog.sjtunix.cn/2016/12/21/After-Effectss-DEV/"/>
    <id>http://blog.sjtunix.cn/2016/12/21/After-Effectss-DEV/</id>
    <published>2016-12-21T00:18:16.000Z</published>
    <updated>2016-12-21T08:17:29.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Effect（效果器）插件可以被用来创作、处理音视频。它是AE中的一种插件类型。</p>
<p>Effect（效果器）出现在Effect菜单和Effect&amp;Presets面板中，并在PiPL文件中申明。一旦应用了Effect（效果器）,它的参数控制就会出现在效果器控制面板中（Effect Control panel, ECP）。</p>
<p>插件都必须包含一个Plug-in Property List（PiPL），并且插件必须放在特定的文件夹中以便AE加载。</p>
<p>对于所有的effect插件，AE通过发送命令选择器（command selector）到插件的入口函数（在PiPL资源文件中指定的）与插件沟通。而这些命令通过用户的一些行为触发，包括应用effect，改变参数，擦除时间轴的帧，显然序列等等。AE创建了effect的多个实例，以便于对于每个序列它的设置和输入都是独立的。但所有的实例都拥有相同的全局变量，并在它们序列的所有帧之间共享数据。一旦用户应用effectAE才会开始处理图片数据。</p>
<a id="more"></a>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>第一步，要创建一个自己的effect项目，首先复制整个<code>\Skeleton</code>文件夹，重命名为<code>\YourName</code>，然后使用Ultraedit或其他编辑器批量替换<code>\YourName</code>文件夹下所有的<code>Skeleton</code>和<code>SKELETON</code>为<code>YourName&#39;和</code>YOURNAME`。</p>
<p>第二步，在VS中配置输出目录为AE的插件目录。可以在环境变量中新建一个变量<code>AE_PLUGIN_BUILD_DIR</code>，值为<code>C:\Program Files\Adobe\Common\Plug-ins\7.0\MediaCore\</code>（可能有所区别，以具体安装版本和情况为准），然后在<code>配置属性&gt;常规&gt;输出目录</code>中设置输出目录。</p>
<p>第三步，在VS中配置调试文件为AE的可执行文件。在<code>配置属性&gt;调试&gt;命令</code>中设置AE的可执行文件路径。如<code>D:\Program Files\Adobe\Adobe After Effects CC 2014\Support Files\AfterFX.exe</code>。</p>
<p>调试时可选择删除配置信息。方法为在每次AE重启的时候按住<code>Ctrl-Alt-Shift</code>即可。</p>
<p>PiPL资源文件规定了入口函数名称，显示的名称，和插件的匹配名称（match name）。</p>
<h1 id="Effect基础"><a href="#Effect基础" class="headerlink" title="Effect基础"></a>Effect基础</h1><p>入口函数中的参数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">PF_Err <span class="title">main</span> <span class="params">(</span></span></div><div class="line">PF_Cmd cmd,</div><div class="line">PF_InData *in_data,</div><div class="line">PF_OutData *out_data,</div><div class="line">PF_ParamDef *params[],</div><div class="line">PF_LayerDef *output,</div><div class="line"><span class="keyword">void</span> *extra)</div></pre></td></tr></table></figure></p>
<p>每次调用入口函数，AE会更新<code>PF_InData</code>和插件的参数数组<code>PF_ParamDef[]</code>。在插件返回后，AE会检查<code>PF_OutData</code>以便更改，并且在合适的时候，使用effect渲染过的<code>PF_LayerDef</code>。</p>
<p><code>params</code>和<code>output</code>分别包含当前输入输出帧（params[0]包含输入图像）。</p>
<h1 id="Effect进阶"><a href="#Effect进阶" class="headerlink" title="Effect进阶"></a>Effect进阶</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Effect（效果器）插件可以被用来创作、处理音视频。它是AE中的一种插件类型。&lt;/p&gt;
&lt;p&gt;Effect（效果器）出现在Effect菜单和Effect&amp;amp;Presets面板中，并在PiPL文件中申明。一旦应用了Effect（效果器）,它的参数控制就会出现在效果器控制面板中（Effect Control panel, ECP）。&lt;/p&gt;
&lt;p&gt;插件都必须包含一个Plug-in Property List（PiPL），并且插件必须放在特定的文件夹中以便AE加载。&lt;/p&gt;
&lt;p&gt;对于所有的effect插件，AE通过发送命令选择器（command selector）到插件的入口函数（在PiPL资源文件中指定的）与插件沟通。而这些命令通过用户的一些行为触发，包括应用effect，改变参数，擦除时间轴的帧，显然序列等等。AE创建了effect的多个实例，以便于对于每个序列它的设置和输入都是独立的。但所有的实例都拥有相同的全局变量，并在它们序列的所有帧之间共享数据。一旦用户应用effectAE才会开始处理图片数据。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sjtunix.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AE开发" scheme="http://blog.sjtunix.cn/tags/AE%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>算法学习之union-find</title>
    <link href="http://blog.sjtunix.cn/2016/12/16/unionfind/"/>
    <id>http://blog.sjtunix.cn/2016/12/16/unionfind/</id>
    <published>2016-12-16T10:13:18.000Z</published>
    <updated>2016-12-27T12:38:24.733Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始在跟进coursera的算法课程，为明年的实习面试做准备。Sedgewick的这门算法课程非常出名，配套的有一本书叫做《Algorithms》,和Coursera上的课程配套。</p>
<p>第一周课程先以一个案例即union-find算法为例，阐述算法分析的基础。</p>
<p>#动态连通性<br>union-find算法要解决的是一个连通性问题。首先，问题描述：<br>给定一个有N个对象的集合，定义如下操作:</p>
<ul>
<li>Union command: 连接两个对象。</li>
<li>Find/connected query：两个对象之间是否是连通的。</li>
</ul>
<p>该问题有许多应用场景，如迷宫寻路，物理化学中的渗流和通信网络中的连通性等等。</p>
<a id="more"></a>
<p>算法的API定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> class UF</span></div><div class="line">	<span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span>							inial union-find data stucture with N <span class="title">objects</span><span class="params">(<span class="number">0</span> to N<span class="number">-1</span>)</span></div><div class="line">	<span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span>			add connection between p and q</div><div class="line">	<span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span>		are p and q in the same component?</div><div class="line">	<span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span>						component identifier <span class="keyword">for</span> <span class="title">p</span><span class="params">(<span class="number">0</span> to N<span class="number">-1</span>)</span></div><div class="line">	<span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> 						number of component</div></pre></td></tr></table></figure></p>
<p>动态连通性client<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function">publci <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> N = StdIn.readInt();</div><div class="line">	UF uf = <span class="keyword">new</span> UF(N);</div><div class="line">	<span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</div><div class="line">		<span class="keyword">int</span> p = StdIn.readInt();</div><div class="line">		<span class="keyword">int</span> q = StdIn.readInt();</div><div class="line">		<span class="keyword">if</span> (!uf.connected(p, q)) &#123;</div><div class="line">			uf.union(p, q);</div><div class="line">			StdOut.println(p + <span class="string">" "</span> + q);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出实例：</p>
<p><img src="/img/client.png" alt="动态连通性"></p>
<p>课程实现了两种UnionFind算法，逐渐优化。</p>
<h1 id="Quick-find"><a href="#Quick-find" class="headerlink" title="Quick-find"></a>Quick-find</h1><p>第一种使用暴力方法，每次union(p, q)，将所有值为q的索引的值更新为q</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFindUF</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] id;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">QuickFindUF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">		id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">		id[i] = i;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id[p] = id[q];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> pid = id[p];</div><div class="line">		<span class="keyword">int</span> qid = id[q];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++) </div><div class="line">			<span class="keyword">if</span> (id[i] == pid) id[i] = qid;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Quick-uinion"><a href="#Quick-uinion" class="headerlink" title="Quick-uinion"></a>Quick-uinion</h1><p>使用数据结构“树”，同一子集有相同的祖先节点（根节点）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickUnionUF</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] id;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">QuickUnionUF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">		id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">		id[i] = i;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span> (i != id[i]) i = id[i];</div><div class="line">		<span class="keyword">return</span> i;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</div><div class="line">		<span class="function">retur <span class="title">root</span><span class="params">(p)</span> </span>== root(q);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i = root(p);</div><div class="line">		<span class="keyword">int</span> j = root(q);</div><div class="line">		id[i] = j;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="改进一：加权"><a href="#改进一：加权" class="headerlink" title="改进一：加权"></a>改进一：加权</h2><p>防止“树枝”过长，根据权重调节树枝长度。</p>
<p>修改<code>union</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = root(p);</div><div class="line"><span class="keyword">int</span> j = root(q);</div><div class="line"><span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">if</span> (sz[i] &lt; sz[j]) &#123;</div><div class="line">	id[i] = j;</div><div class="line">	sz[j] += sz[i];</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	id[j] = i;</div><div class="line">	sz[i] += sz[j];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="改进二：路径压缩"><a href="#改进二：路径压缩" class="headerlink" title="改进二：路径压缩"></a>改进二：路径压缩</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span> (i != id[i]) &#123;</div><div class="line">		id[i] = id[id[i]];</div><div class="line">		i = id[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> i;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="课程作业——渗透问题-Pecolation"><a href="#课程作业——渗透问题-Pecolation" class="headerlink" title="课程作业——渗透问题(Pecolation)"></a>课程作业——渗透问题(Pecolation)</h1><p>问题描述的网址在<a href="http://coursera.cs.princeton.edu/algs4/assignments/percolation.html" target="_blank" rel="external">Programming Assignment 1: Pecolation</a></p>
<p><strong>寒假有空整理下，未完待续……</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开始在跟进coursera的算法课程，为明年的实习面试做准备。Sedgewick的这门算法课程非常出名，配套的有一本书叫做《Algorithms》,和Coursera上的课程配套。&lt;/p&gt;
&lt;p&gt;第一周课程先以一个案例即union-find算法为例，阐述算法分析的基础。&lt;/p&gt;
&lt;p&gt;#动态连通性&lt;br&gt;union-find算法要解决的是一个连通性问题。首先，问题描述：&lt;br&gt;给定一个有N个对象的集合，定义如下操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Union command: 连接两个对象。&lt;/li&gt;
&lt;li&gt;Find/connected query：两个对象之间是否是连通的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该问题有许多应用场景，如迷宫寻路，物理化学中的渗流和通信网络中的连通性等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.sjtunix.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++学习笔记</title>
    <link href="http://blog.sjtunix.cn/2016/12/13/C-%E4%B8%AD%E7%9A%84%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>http://blog.sjtunix.cn/2016/12/13/C-中的宏定义/</id>
    <published>2016-12-13T06:57:51.000Z</published>
    <updated>2016-12-14T05:31:20.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-中的宏"><a href="#C-中的宏" class="headerlink" title="C++中的宏"></a>C++中的宏</h1><p>由于很长时间没有摸C++这门儿语言了，把宏定义简单理解成了类似于变量声明和函数声明式地东西。然而，爬了一下博客才发现，宏仅仅只会在在预处理过程中展开，做简单的字符串替换，而<code>没有任何的计算过程</code>。</p>
<p>两篇关于C++宏的相关讲解。<br><a href="http://www.cnblogs.com/sopic/archive/2013/12/27/3493877.html" target="_blank" rel="external">http://www.cnblogs.com/sopic/archive/2013/12/27/3493877.html</a>,这一篇强烈推荐。</p>
<p><a href="http://blog.chinaunix.net/uid-21372424-id-119797.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-21372424-id-119797.html</a></p>
<hr>
<a id="more"></a>
<h1 id="C-中的Lambda函数（匿名函数）"><a href="#C-中的Lambda函数（匿名函数）" class="headerlink" title="C++中的Lambda函数（匿名函数）"></a>C++中的Lambda函数（匿名函数）</h1><p>更新，今天学习了一下C++11标准中的lambda函数（匿名函数）。<br>Lambda函数的总体形式是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[captures] (params) -&gt; ret &#123;Statements;&#125;</div></pre></td></tr></table></figure></p>
<p><code>captrues</code>表示变量截取，</p>
<ul>
<li>[]不截取任何变量</li>
<li>[&amp;]截取外部作用域中所有变量，并作为引用在函数体中使用</li>
<li>[=]截取外部作用域中所有变量，并拷贝一份在函数体中使用</li>
<li>[-, &amp;foo]截取外部作用域中所有变量，并拷贝一份在函数体中使用，但对<code>foo</code>变量使用引用</li>
<li>[bar]截取<code>bar</code>变量并且拷贝一份在函数体中使用，同时不截取其他变量</li>
<li>[this]截取当前类中的<code>this</code>指针。如果已经使用了<code>&amp;</code>或者<code>=</code>就默认添加此选项</li>
</ul>
<p><code>params</code>表示参数列表，<br><code>ret</code>表示返回值类型，<br><code>statements</code>就是函数体了。</p>
<p>参考自<a href="http://www.cnblogs.com/lidabo/p/3908663.html" target="_blank" rel="external">http://www.cnblogs.com/lidabo/p/3908663.html</a></p>
<h1 id="C-中构造函数之间的调用"><a href="#C-中构造函数之间的调用" class="headerlink" title="C++中构造函数之间的调用"></a>C++中构造函数之间的调用</h1><p>偶然看一份代码的时候，发现C++构造函数之间时可以互相调用的，这样可以减少重载构造函数时所需的代码量。这种构造函数之间的调用称为<code>委托</code>或<code>转接</code>（delegation)，Java以及C#都支持这种功能。例如：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> SomeType &#123;</div><div class="line">  <span class="keyword">int</span> number;</div><div class="line">  <span class="built_in">string</span> name;</div><div class="line">  SomeType( <span class="keyword">int</span> i, <span class="built_in">string</span>&amp; s ) : number(i), name(s)&#123;&#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  SomeType( )           : SomeType( <span class="number">0</span>, <span class="string">"invalid"</span> )&#123;&#125;</div><div class="line">  SomeType( <span class="keyword">int</span> i )     : SomeType( i, <span class="string">"guest"</span> )&#123;&#125;</div><div class="line">  SomeType( <span class="built_in">string</span>&amp; s ) : SomeType( <span class="number">1</span>, s )&#123; PostInit(); &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>相关内容参考自<a href="http://www.cnblogs.com/ayanmw/archive/2012/08/20/2647808.html" target="_blank" rel="external">http://www.cnblogs.com/ayanmw/archive/2012/08/20/2647808.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-中的宏&quot;&gt;&lt;a href=&quot;#C-中的宏&quot; class=&quot;headerlink&quot; title=&quot;C++中的宏&quot;&gt;&lt;/a&gt;C++中的宏&lt;/h1&gt;&lt;p&gt;由于很长时间没有摸C++这门儿语言了，把宏定义简单理解成了类似于变量声明和函数声明式地东西。然而，爬了一下博客才发现，宏仅仅只会在在预处理过程中展开，做简单的字符串替换，而&lt;code&gt;没有任何的计算过程&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;两篇关于C++宏的相关讲解。&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/sopic/archive/2013/12/27/3493877.html&quot;&gt;http://www.cnblogs.com/sopic/archive/2013/12/27/3493877.html&lt;/a&gt;,这一篇强烈推荐。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.chinaunix.net/uid-21372424-id-119797.html&quot;&gt;http://blog.chinaunix.net/uid-21372424-id-119797.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sjtunix.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://blog.sjtunix.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++中的##和#</title>
    <link href="http://blog.sjtunix.cn/2016/12/13/C-%E4%B8%AD%E7%9A%84-%E5%92%8C/"/>
    <id>http://blog.sjtunix.cn/2016/12/13/C-中的-和/</id>
    <published>2016-12-13T06:30:15.000Z</published>
    <updated>2016-12-13T06:46:33.981Z</updated>
    
    <content type="html"><![CDATA[<p>原文来自<a href="http://www.2cto.com/kf/201503/381187.html" target="_blank" rel="external">http://www.2cto.com/kf/201503/381187.html</a></p>
<p>在C/C++的宏中，“#”的功能是将其后面的宏参数进行字符串化操作(Stringfication)，简单说就是在对它所引用的宏变量通过替换后在其左右各加上一个双引号。</p>
<p>而“##”被称为连接符(concatenator)，用来将两个子串Token连接为一个Token。注意这里连接的对象是Token就行，而不一定是宏的变量。还可以n个##符号连接n+1个Token，这个特性是“#”符号所不具备的。</p>
<p>凡是宏定义里有用“#”或“##”的地方宏参数是不会再展开。</p>
<p>若要使“#”和“##”的宏参数被展开，可以加多一层中间转换宏。加这层宏的用意是把所有宏的参数在这层里全部展开，那么在转换宏里的那一个宏就能得到正确的宏参数。<br><a id="more"></a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="comment">//test1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> WARN_IF(EXP) </span></div><div class="line">    <span class="keyword">if</span> (EXP) </div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, warning: #EXP);</div><div class="line"> </div><div class="line"><span class="comment">//test2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STR(s) #s</span></div><div class="line"> </div><div class="line"><span class="comment">//test3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _STRI(s) #s</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STRI(s) _STRI(s) <span class="comment">//转换宏</span></span></div><div class="line"> </div><div class="line"><span class="comment">//test4</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> paster(n) printf(token#n = %d, token##n)</span></div><div class="line"> </div><div class="line"><span class="comment">//test5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CONS(a, b) int(a##+##b)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CONS(a, b) _CONS(a, b) <span class="comment">//转换宏</span></span></div><div class="line"> </div><div class="line"><span class="comment">//test6</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  _GET_FILE_NAME(f)   #f</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  GET_FILE_NAME(f)    _GET_FILE_NAME(f)  <span class="comment">//转换宏</span></span></div><div class="line"> </div><div class="line"><span class="comment">//test7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  _TYPE_BUF_SIZE(type)  sizeof #type</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  TYPE_BUF_SIZE(type)   _TYPE_BUF_SIZE(type) </span></div><div class="line"> </div><div class="line"><span class="comment">//test8</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> D(x)  #@x  <span class="comment">//仅对单一标记转换有效</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//test1</span></div><div class="line">    <span class="keyword">int</span> divider = <span class="number">0</span>;</div><div class="line">    WARN_IF(divider == <span class="number">0</span>);<span class="comment">//warning: divider == 0 </span></div><div class="line"> </div><div class="line">    <span class="comment">//test2</span></div><div class="line">    <span class="built_in">printf</span>(<span class="keyword">int</span> max: %s, STR(INT_MAX));<span class="comment">//int max: INT_MAX</span></div><div class="line"> </div><div class="line">    <span class="comment">//test3</span></div><div class="line">    <span class="built_in">printf</span>(<span class="keyword">int</span> max: %s, STRI(INT_MAX));<span class="comment">//int max: 2147483647</span></div><div class="line"> </div><div class="line">    <span class="comment">//test4</span></div><div class="line">    <span class="keyword">int</span> token9 = <span class="number">9</span>;</div><div class="line">    paster(<span class="number">9</span>);<span class="comment">//token9 = 9 </span></div><div class="line"> </div><div class="line">    <span class="comment">//test5</span></div><div class="line">    <span class="keyword">int</span> A = <span class="number">15</span>, B = <span class="number">2</span>;</div><div class="line">    <span class="built_in">printf</span>(A + B = %d, CONS(A, B));<span class="comment">//A + B = 17</span></div><div class="line"> </div><div class="line">    <span class="comment">//test6</span></div><div class="line">    <span class="keyword">char</span>  FILE_NAME[] = GET_FILE_NAME(__FILE__);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;file_name&lt;&lt;<span class="built_in">endl</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文来自&lt;a href=&quot;http://www.2cto.com/kf/201503/381187.html&quot;&gt;http://www.2cto.com/kf/201503/381187.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在C/C++的宏中，“#”的功能是将其后面的宏参数进行字符串化操作(Stringfication)，简单说就是在对它所引用的宏变量通过替换后在其左右各加上一个双引号。&lt;/p&gt;
&lt;p&gt;而“##”被称为连接符(concatenator)，用来将两个子串Token连接为一个Token。注意这里连接的对象是Token就行，而不一定是宏的变量。还可以n个##符号连接n+1个Token，这个特性是“#”符号所不具备的。&lt;/p&gt;
&lt;p&gt;凡是宏定义里有用“#”或“##”的地方宏参数是不会再展开。&lt;/p&gt;
&lt;p&gt;若要使“#”和“##”的宏参数被展开，可以加多一层中间转换宏。加这层宏的用意是把所有宏的参数在这层里全部展开，那么在转换宏里的那一个宏就能得到正确的宏参数。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sjtunix.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://blog.sjtunix.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>for iterator</title>
    <link href="http://blog.sjtunix.cn/2016/12/09/for-iterator/"/>
    <id>http://blog.sjtunix.cn/2016/12/09/for-iterator/</id>
    <published>2016-12-09T00:45:58.000Z</published>
    <updated>2016-12-09T05:02:47.264Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看了下C++的并行运算实现方式，编程实现有两种方式，MPI和OpenMP。知乎上有做比较，暂作摘录，区别在于：</p>
<ul>
<li>OpenMP：线程级（并行粒度）；共享存储；隐式（数据分配方式）；可扩展性差；</li>
<li>MPI：进程级；分布式存储；显式；可扩展性好。</li>
</ul>
<p>OpenMP采用共享存储，意味着它只适应于SMP,DSM机器，不适合于集群。MPI虽适合于各种机器，但它的编程模型复杂：</p>
<ul>
<li>需要分析及划分应用程序问题，并将问题映射到分布式进程集合；</li>
<li>需要解决通信延迟大和负载不平衡两个主要问题；</li>
<li>调试MPI程序麻烦；</li>
<li>MPI程序可靠性差，一个进程出问题，整个程序将错误；<a id="more"></a>
</li>
</ul>
<blockquote>
<p>作者：李超铮<br>链接：<a href="https://www.zhihu.com/question/20188244/answer/14552204" target="_blank" rel="external">https://www.zhihu.com/question/20188244/answer/14552204</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
</blockquote>
<p>最近在移植一份linux c++代码，正好用到了OpenMP。使用很简单，直接VS开启OpenMP支持，然后在代码前添加#pragma注释即可。</p>
<p>当然前面都是背景…</p>
<p>并行计算最适合的场景是for循环，然后就顺带了解了下c++11支持的for循环结构。众所周知，java在1.5JDK版本就开始支持了增强for循环，有多好用不用我多说了，现在基本语言都支持了增强for循环，C++11也实现了。以下为C++11支持的5种for循环方式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numSet;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; numSet.size(); i++);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> itr = numSet.begin(); itr != numSet.end(); itr++);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> item : numSet);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">for</span> <span class="title">each</span><span class="params">(<span class="keyword">auto</span> item in numSet)</span></span>;</div><div class="line"></div><div class="line">	<span class="built_in">std</span>::for_each(numSet.begin(), numSet.end(), [&amp;](<span class="keyword">int</span> i)&#123;;&#125;);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>按轮子哥的说法，<br>第一个不好，万一numSet[i]不是O(1)的呢，容器可不止vector一种。<br>第二个太长了。<br><strong>第三个是推荐的。</strong><br>第四个是VC++的C++/CLI或C++/CX扩展，不过他跟第三个其实完全没有区别，因为互相都可以用。<br>第五个很难讲，主要是你要把整个程序写成函数式或响应式的，用这个才有额外的好处。</p>
<blockquote>
<p>作者：vczh<br>链接：<a href="https://www.zhihu.com/question/28127777/answer/39500842" target="_blank" rel="external">https://www.zhihu.com/question/28127777/answer/39500842</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天看了下C++的并行运算实现方式，编程实现有两种方式，MPI和OpenMP。知乎上有做比较，暂作摘录，区别在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenMP：线程级（并行粒度）；共享存储；隐式（数据分配方式）；可扩展性差；&lt;/li&gt;
&lt;li&gt;MPI：进程级；分布式存储；显式；可扩展性好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OpenMP采用共享存储，意味着它只适应于SMP,DSM机器，不适合于集群。MPI虽适合于各种机器，但它的编程模型复杂：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要分析及划分应用程序问题，并将问题映射到分布式进程集合；&lt;/li&gt;
&lt;li&gt;需要解决通信延迟大和负载不平衡两个主要问题；&lt;/li&gt;
&lt;li&gt;调试MPI程序麻烦；&lt;/li&gt;
&lt;li&gt;MPI程序可靠性差，一个进程出问题，整个程序将错误；
    
    </summary>
    
      <category term="技术" scheme="http://blog.sjtunix.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://blog.sjtunix.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu</title>
    <link href="http://blog.sjtunix.cn/2016/11/16/ubuntu/"/>
    <id>http://blog.sjtunix.cn/2016/11/16/ubuntu/</id>
    <published>2016-11-16T05:11:18.000Z</published>
    <updated>2016-11-17T08:34:50.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ubuntu16-04安装后的一些优化"><a href="#ubuntu16-04安装后的一些优化" class="headerlink" title="ubuntu16.04安装后的一些优化"></a>ubuntu16.04安装后的一些优化</h2><p>记录一些unbuntu安装后的调整优化工作和各种开发环境搭建工作</p>
<h3 id="调整启动器"><a href="#调整启动器" class="headerlink" title="调整启动器"></a>调整启动器</h3><p>将默认的左栏调整到底部<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gsettings <span class="built_in">set</span> com.canonical.Unity.Launcher launcher-position Bottom</div></pre></td></tr></table></figure></p>
<h3 id="卸载”Amazon”链接"><a href="#卸载”Amazon”链接" class="headerlink" title="卸载”Amazon”链接"></a>卸载”Amazon”链接</h3><p>在启动器删掉，然后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get remove unity-webapps-common</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="卸载”LibreOffice”办公软件"><a href="#卸载”LibreOffice”办公软件" class="headerlink" title="卸载”LibreOffice”办公软件"></a>卸载”LibreOffice”办公软件</h3><p>不太方便，还是使用wps比较好<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get remove libreoffice-common<span class="string">"</span></div></pre></td></tr></table></figure></p>
<h3 id="删除很多几乎不用的软件"><a href="#删除很多几乎不用的软件" class="headerlink" title="删除很多几乎不用的软件"></a>删除很多几乎不用的软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install</div></pre></td></tr></table></figure>
<h3 id="安装”Oracle-Java”"><a href="#安装”Oracle-Java”" class="headerlink" title="安装”Oracle Java”"></a>安装”Oracle Java”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:webupd8team/java    </div><div class="line">sudo apt-get update    </div><div class="line">sudo apt-get install oracle-java8-installer</div></pre></td></tr></table></figure>
<h3 id="安装”git”"><a href="#安装”git”" class="headerlink" title="安装”git”"></a>安装”git”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure>
<h3 id="安装”vim”"><a href="#安装”vim”" class="headerlink" title="安装”vim”"></a>安装”vim”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install vim</div></pre></td></tr></table></figure>
<h3 id="安装”sublime-text3”"><a href="#安装”sublime-text3”" class="headerlink" title="安装”sublime text3”"></a>安装”sublime text3”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:webupd8team/sublime-text-3    </div><div class="line">sudo apt-get update    </div><div class="line">sudo apt-get install sublime-text</div></pre></td></tr></table></figure>
<h3 id="安装”unrar”"><a href="#安装”unrar”" class="headerlink" title="安装”unrar”"></a>安装”unrar”</h3><p>常用的解压软件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install unrar</div></pre></td></tr></table></figure></p>
<h3 id="安装”cmake和qtcreator”"><a href="#安装”cmake和qtcreator”" class="headerlink" title="安装”cmake和qtcreator”"></a>安装”cmake和qtcreator”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install cmake qtcreator</div></pre></td></tr></table></figure>
<h3 id="安装”android-studio”"><a href="#安装”android-studio”" class="headerlink" title="安装”android studio”"></a>安装”android studio”</h3><p>先去官网下载最新安装包IDE，然后解压到一个目录，我解压到了<code>/usr/local/</code>，然后可以在<code>PATH</code>中加入启动命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/profile</div></pre></td></tr></table></figure></p>
<p>注意这是修改的个人用户的全局变量，然后可以<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> /etc/profile</div></pre></td></tr></table></figure></p>
<p>更新一下该文件</p>
<p>安装完android studio后会提示下载SDK，可以用代理快很多，另外64位的ubuntu要安装32支持包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6</div></pre></td></tr></table></figure></p>
<p>按照官方文档会提示找不到该库，需要删掉其中一个<code>lib32bz2-1.0</code>，然后单独安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install lib32z1 lib32ncurses5 lib32stdc++6</div></pre></td></tr></table></figure></p>
<p>单独安装命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo dpkg --add-architecture i386</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install lib32bz2-1.0:i386</div></pre></td></tr></table></figure></p>
<h2 id="安装Macbuntu主题"><a href="#安装Macbuntu主题" class="headerlink" title="安装Macbuntu主题"></a>安装Macbuntu主题</h2><p>链接地址<a href="http://www.noobslab.com/2016/04/macbuntu-1604-transformation-pack-for.html" target="_blank" rel="external">macbuntu</a><br>macbuntu是一套主题图标和各种字体plank的一套素材，能让你的ubuntu非常接近mac osx的外观。</p>
<h2 id="ubuntu下的一些问题"><a href="#ubuntu下的一些问题" class="headerlink" title="ubuntu下的一些问题"></a>ubuntu下的一些问题</h2><p>无法挂载ntfs的格式的分区<br>使用了ntfsfix命令修复了这个问题。</p>
<pre><code>ntfsfix repairs some fundamental NTFS inconsistencies, resets the NTFS journal file and schedules an NTFS consistency check for the first boot into Windows.
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ntfsfix /dev/[yourdevice partion]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ubuntu16-04安装后的一些优化&quot;&gt;&lt;a href=&quot;#ubuntu16-04安装后的一些优化&quot; class=&quot;headerlink&quot; title=&quot;ubuntu16.04安装后的一些优化&quot;&gt;&lt;/a&gt;ubuntu16.04安装后的一些优化&lt;/h2&gt;&lt;p&gt;记录一些unbuntu安装后的调整优化工作和各种开发环境搭建工作&lt;/p&gt;
&lt;h3 id=&quot;调整启动器&quot;&gt;&lt;a href=&quot;#调整启动器&quot; class=&quot;headerlink&quot; title=&quot;调整启动器&quot;&gt;&lt;/a&gt;调整启动器&lt;/h3&gt;&lt;p&gt;将默认的左栏调整到底部&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gsettings &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; com.canonical.Unity.Launcher launcher-position Bottom&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;卸载”Amazon”链接&quot;&gt;&lt;a href=&quot;#卸载”Amazon”链接&quot; class=&quot;headerlink&quot; title=&quot;卸载”Amazon”链接&quot;&gt;&lt;/a&gt;卸载”Amazon”链接&lt;/h3&gt;&lt;p&gt;在启动器删掉，然后执行&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get remove unity-webapps-common&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://blog.sjtunix.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>tools</title>
    <link href="http://blog.sjtunix.cn/2016/11/08/tools/"/>
    <id>http://blog.sjtunix.cn/2016/11/08/tools/</id>
    <published>2016-11-08T13:55:37.000Z</published>
    <updated>2016-11-08T13:57:48.616Z</updated>
    
    <content type="html"><![CDATA[<p>不定期更新前端好用的工具和新技术，自我洗脑=，=</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不定期更新前端好用的工具和新技术，自我洗脑=，=&lt;/p&gt;

    
    </summary>
    
      <category term="收藏" scheme="http://blog.sjtunix.cn/categories/%E6%94%B6%E8%97%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>搜索网站汇总</title>
    <link href="http://blog.sjtunix.cn/2016/11/08/favorites/"/>
    <id>http://blog.sjtunix.cn/2016/11/08/favorites/</id>
    <published>2016-11-08T13:16:22.899Z</published>
    <updated>2016-11-08T13:54:14.834Z</updated>
    
    <content type="html"><![CDATA[<p>不定期汇总各种种子搜索网站。</p>
<h2 id="视频类："><a href="#视频类：" class="headerlink" title="视频类："></a>视频类：</h2><ul>
<li><p><a href="http://btmee.net/" target="_blank" rel="external">BTmee.net</a>——偶然找到的一个非常好的视频种子下载网站，资源很多</p>
</li>
<li><p><a href="http://www.quansouji.com/" target="_blank" rel="external">全搜集</a>——一个带有社交网络平台的视频分享网站，做的非常棒</p>
</li>
<li><p><a href="http://www.celebritymoviearchive.com/" target="_blank" rel="external">Celebrity Movie Archive</a>——收集了大量的名人电影信息，不过好像没有种子，但对于想找自己喜欢的明星（老外）电影的朋友来说，非常有用</p>
</li>
<li><p><a href="http://www.qindou8.com/" target="_blank" rel="external">亲豆网</a>——偶然搜到的视频种子网站</p>
</li>
<li><p><a href="http://www.zhuixinfan.com/" target="_blank" rel="external">追新番</a>——日剧下载网站</p>
</li>
</ul>
<h2 id="综合类："><a href="#综合类：" class="headerlink" title="综合类："></a>综合类：</h2><ul>
<li><p><a href="http://www.btany.com/" target="_blank" rel="external">Bt ants</a>——号称是最大的BT资源搜索引擎</p>
</li>
<li><p><a href="https://thepiratebay.se/" target="_blank" rel="external">海盗船</a>——不用多说了</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不定期汇总各种种子搜索网站。&lt;/p&gt;
&lt;h2 id=&quot;视频类：&quot;&gt;&lt;a href=&quot;#视频类：&quot; class=&quot;headerlink&quot; title=&quot;视频类：&quot;&gt;&lt;/a&gt;视频类：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://btmee.net/&quot; tar
    
    </summary>
    
      <category term="收藏" scheme="http://blog.sjtunix.cn/categories/%E6%94%B6%E8%97%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>VPN</title>
    <link href="http://blog.sjtunix.cn/2016/11/06/VPN/"/>
    <id>http://blog.sjtunix.cn/2016/11/06/VPN/</id>
    <published>2016-11-06T13:06:51.000Z</published>
    <updated>2016-11-06T13:17:14.997Z</updated>
    
    <content type="html"><![CDATA[<p>周六应室友要求，帮他搭建了一个VPN，由于IOS10不再支持l2tp连接方式，重新搭建了一个IKEv2的VPN，网上找到大神的脚本，直接跑好了，这个页面就用来放证书文件了。有朋友需要的可以廉价出售，速度稳定，洛杉矶的VPS。</p>
<p><a href="https://raw.githubusercontent.com/tribody/markdown_assets/master/ca.cert.pem.cer" target="_blank" rel="external">ios VPN certification</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周六应室友要求，帮他搭建了一个VPN，由于IOS10不再支持l2tp连接方式，重新搭建了一个IKEv2的VPN，网上找到大神的脚本，直接跑好了，这个页面就用来放证书文件了。有朋友需要的可以廉价出售，速度稳定，洛杉矶的VPS。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://
    
    </summary>
    
    
      <category term="VPN" scheme="http://blog.sjtunix.cn/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>Hexo入门</title>
    <link href="http://blog.sjtunix.cn/2016/11/06/hello-world/"/>
    <id>http://blog.sjtunix.cn/2016/11/06/hello-world/</id>
    <published>2016-11-06T08:11:26.598Z</published>
    <updated>2016-11-08T13:34:13.909Z</updated>
    
    <content type="html"><![CDATA[<p>楼主有一台国外的vps，之前搭过wordpress，但是访问延迟较大，又因为前段时间服务器系统搞坏了，重装了系统，打算把那台服务器完全用来搭VPN和SS了，不再放网站在上面了。于是，转入了Hexo。本博文完成以下目标，首先，安装hexo博客系统，然后安装主题，最后做一个域名绑定。楼主记性最近不好，虽然文章网上都能搜到，但是做个记载还是好的。</p>
<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div><div class="line">$ hexo init [目录名]</div><div class="line">$ <span class="built_in">cd</span> [目录名]</div><div class="line">$ npm install</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>注意这个地方有个坑，楼主当时打完这段命令，然后按照提示用<code>4000</code>端口访问<code>localhost:4000</code>，发现怎么都加载不出来，百度了好久，发现是安装了福昕pdf阅读器的原因，太坑了！<code>4000</code>被占用了！所以，你可以使用如下命令换个端口号:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server -p [你要用的端口号]</div></pre></td></tr></table></figure></p>
<p>详见：<a href="https://hexo.io/docs/commands.html#server" target="_blank" rel="external">server</a></p>
<p>更多信息: <a href="https://hexo.io" target="_blank" rel="external">安装</a></p>
<h2 id="Hexo相关命令"><a href="#Hexo相关命令" class="headerlink" title="Hexo相关命令"></a>Hexo相关命令</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init [folder]</div></pre></td></tr></table></figure>
<p>更多信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">服务器</a></p>
<h3 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>更多信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">生成页面</a></p>
<h3 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>选项</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-p</code>,<code>--port</code></td>
<td>指定端口号</td>
</tr>
<tr>
<td><code>-s</code>,<code>--static</code></td>
<td>仅仅加载静态文件</td>
</tr>
<tr>
<td><code>-l</code>,<code>--log</code></td>
<td>打开日志输出</td>
</tr>
</tbody>
</table>
<p>更多信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">服务器</a></p>
<h3 id="创建新文章-post"><a href="#创建新文章-post" class="headerlink" title="创建新文章(post)"></a>创建新文章(post)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>除了创建post（文章），还可以通过该命令创建自定义页面，</p>
<ul>
<li><p>在博客根目录下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page xxxx</div></pre></td></tr></table></figure>
</li>
<li><p>设置页面模板</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title:xxxx</div><div class="line">layout:page  # 添加使用page模板</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
<li><p>修改菜单</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  Home: /</div><div class="line">  Archives: /archives</div><div class="line">  About: /about/</div><div class="line">  xxxx: /xxxx/  # 确保与source/xxxx/index.md文件中的title一致</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="部署到站点"><a href="#部署到站点" class="headerlink" title="部署到站点"></a>部署到站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>更多信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">部署</a></p>
<p>Hexo主题虽然没有wordpress多，但也有相当量优秀的主题，楼主使用的这个主题叫<a href="https://github.com/ahonn/hexo-theme-even" target="_blank" rel="external">even</a>的主题,在此作分享。</p>
<h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><p>首先，你得有一个域名。</p>
<p>然后，在<code>source</code>目录下新建<code>CNAME</code>文件，内容为要绑定的域名，例如<code>blog.riverhe.cn</code>。</p>
<p>然后，将域名解析到你的github-pages相对应的域名上来。</p>
<ul>
<li>添加DNS解析记录类型CNAME</li>
<li>主机记录自己选择，我的是<code>blog</code></li>
<li>记录值填写tribody.github.io（根据自己情况）</li>
<li>其他默认</li>
</ul>
<p>如此便完成了域名绑定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;楼主有一台国外的vps，之前搭过wordpress，但是访问延迟较大，又因为前段时间服务器系统搞坏了，重装了系统，打算把那台服务器完全用来搭VPN和SS了，不再放网站在上面了。于是，转入了Hexo。本博文完成以下目标，首先，安装hexo博客系统，然后安装主题，最后做一个域名绑定。楼主记性最近不好，虽然文章网上都能搜到，但是做个记载还是好的。&lt;/p&gt;
&lt;h2 id=&quot;Hexo安装&quot;&gt;&lt;a href=&quot;#Hexo安装&quot; class=&quot;headerlink&quot; title=&quot;Hexo安装&quot;&gt;&lt;/a&gt;Hexo安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-cli -g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ hexo init [目录名]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; [目录名]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sjtunix.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Node.js" scheme="http://blog.sjtunix.cn/tags/Node-js/"/>
    
  </entry>
  
</feed>
